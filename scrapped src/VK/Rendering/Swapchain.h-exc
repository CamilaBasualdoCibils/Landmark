#pragma once
#include "G_API/Devices/DeviceResource.h"
#include "Debug/Debug.h"
#include <G_API/GenericEnums.h>

//#include "Framebuffer.h"
#include "Framebuffer_n.h"
#include "G_API/Synchronization/Fence.h"
#include "G_API/Synchronization/Semaphore.h"

#include "G_API/Rendering/RenderPass.h"

class Swapchain final : public DeviceResource
{
public:
	struct SwapchainInfo
	{
		//vk::Flags<ImageUsage> usage;
		vk::SurfaceFormatKHR format;
		vk::PresentModeKHR presentMode;

		//if set to 0, swapchain will decide
		uint32_t imageCount = 0;
		//if set to {0,0}, swapchain will decide
		uvec2 extent = { 0,0 };

		vk::SurfaceTransformFlagBitsKHR transform;
		bool compositeAlpha = false;
		bool clipped = true;
	};
private:
	vk::SwapchainKHR swapChain = nullptr;
	RenderPass current_rp;
	vk::SurfaceKHR current_surface;

	//std::vector<Framebuffer> framebuffers;
	std::vector<Framebuffer_n> framebuffers;
	std::vector<ImageUsage> usage = {};
	
	SwapchainInfo info;

public:
	Swapchain(RenderPass&,vk::SurfaceKHR surface,const SwapchainInfo&);
	//Swapchain(RenderPass&, vk::SurfaceFormatKHR, vk::PresentModeKHR);

	uint32_t AcquireNextImage(bool* OutOfDate,std::optional<Semaphore> triggerSemaphore = {}, std::optional<Fence> triggerFence = {}, uint64_t TimeOutWait = UINT64_MAX);

	vk::SwapchainKHR GetVkSwapchain() const { return swapChain; }

	Framebuffer_n& getFramebuffer(uint32_t index) { return framebuffers[index]; }

	uvec2 getExtent() const { return info.extent; }
	SwapchainInfo GetInfo() const {return info;}
	void Recreate(const SwapchainInfo&,vk::SurfaceKHR new_surface = nullptr, RenderPass* new_renderpass = nullptr);

	void Destroy() override;

private:
	//void CreateSwapchain(const CreateInfo& s_info);
	//void Finalize();
	void MakeSwapchain(RenderPass&,vk::SurfaceKHR surf,const SwapchainInfo& _info);
	void MakeFramebuffers();
};



