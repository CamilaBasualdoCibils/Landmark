#include "pch.h"
#include "RenderAPI_old.h"

#include "ImguiHandler.h"


//#include "ImguiHandler.h"
void GLFW_ErrorCabllack(int errorcode, const char* desc)
{
	static Log _GlfwLogger = Log("GLFW");
	_GlfwLogger.Error() << desc << Log::end;

}
static VKAPI_ATTR VkBool32 VKAPI_CALL VulkanDebugCallback(
	VkDebugUtilsMessageSeverityFlagBitsEXT messageSeverity,
	VkDebugUtilsMessageTypeFlagsEXT messageType,
	const VkDebugUtilsMessengerCallbackDataEXT* pCallbackData,
	void* pUserData) {

	static Log VulkanLogger = Log("Vulkan");



	Landmark::Logging::LogStream* logstream = &VulkanLogger.Debug();

	switch (messageSeverity)
	{
	case VK_DEBUG_UTILS_MESSAGE_SEVERITY_VERBOSE_BIT_EXT:
		logstream = &VulkanLogger.Debug();
		break;
	case VK_DEBUG_UTILS_MESSAGE_SEVERITY_INFO_BIT_EXT:
		logstream = &VulkanLogger.Debug();
		break;
	case VK_DEBUG_UTILS_MESSAGE_SEVERITY_WARNING_BIT_EXT:
		logstream = &VulkanLogger.Warning();
		break;
	case VK_DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT:
		logstream = &VulkanLogger.Error();
		break;
	default:;
	}

	*logstream << pCallbackData->pMessage << Log::end;


	return VK_FALSE;
}



vk::Instance RenderAPI::InitVulkan()
{
	if (!glfwInit())
	{
		const char* Desc;
		int errorCode = glfwGetError(&Desc);

		logger.Critical() << "GLFW failed to initialize:\n" << Desc << Log::end;
	}


	std::vector<const char*> RequestedExtensions = {};
	std::vector<const char*> RequestedValidationLayers = {};

	uint32_t glfwExtensionCount = 0;
	const char** glfwExtensions;

	glfwExtensions = glfwGetRequiredInstanceExtensions(&glfwExtensionCount);

	for (int i = 0; i < glfwExtensionCount; i++)
		RequestedExtensions.emplace_back(glfwExtensions[i]);

	if (RunSettings.EnableValidation)
	{
		RequestedExtensions.emplace_back(VK_EXT_DEBUG_UTILS_EXTENSION_NAME);
	}



	const int VersionMajor = 1, VersionMinor = 4, VersionPatch = 0;
	vk::ApplicationInfo app_info{};
	app_info.sType = vk::StructureType::eApplicationInfo;
	app_info.pApplicationName = "DefaultAppName";
	app_info.applicationVersion = VK_MAKE_VERSION(1, 0, 0);
	app_info.pEngineName = "Landmark Engine";
	app_info.engineVersion = VK_MAKE_VERSION(1, 0, 0);

	app_info.apiVersion = VK_MAKE_API_VERSION(0, VersionMajor, VersionMinor, VersionPatch);


	vk::InstanceCreateInfo instance_create_info{};
	instance_create_info.sType = vk::StructureType::eInstanceCreateInfo;
	instance_create_info.pApplicationInfo = &app_info;
	instance_create_info.flags |= vk::InstanceCreateFlagBits::eEnumeratePortabilityKHR;
	RequestedExtensions.emplace_back(VK_KHR_PORTABILITY_ENUMERATION_EXTENSION_NAME);
	instance_create_info.enabledExtensionCount = RequestedExtensions.size();
	instance_create_info.ppEnabledExtensionNames = RequestedExtensions.data();

	if (RunSettings.EnableValidation)
	{
		RequestedValidationLayers.emplace_back("VK_LAYER_KHRONOS_validation");
		//RequestedValidationLayers.emplace_back()

	}
	instance_create_info.enabledLayerCount = RequestedValidationLayers.size();
	instance_create_info.ppEnabledLayerNames = RequestedValidationLayers.data();

	vk::Instance vulkan_instance;
	try {
		vulkan_instance = vk::createInstance(instance_create_info, nullptr);
		//VULKAN_HPP_DEFAULT_DISPATCHER.init(vulkan_instance);
	}
	catch (vk::SystemError& err)
	{
		logger.Critical() << "Failed to create Vulkan Instance:\n" << err.what() << Log::end;
	}

	logger << "Vulkan Instance Init Version: " << VersionMajor << "." << VersionMinor << "." << VersionPatch << Log::end;

	if (RunSettings.EnableValidation)
	{
		VkDebugUtilsMessengerCreateInfoEXT createInfo{};
		createInfo.sType = VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT;
		createInfo.messageSeverity = VK_DEBUG_UTILS_MESSAGE_SEVERITY_INFO_BIT_EXT | VK_DEBUG_UTILS_MESSAGE_SEVERITY_VERBOSE_BIT_EXT | VK_DEBUG_UTILS_MESSAGE_SEVERITY_WARNING_BIT_EXT | VK_DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT;
		createInfo.messageType = VK_DEBUG_UTILS_MESSAGE_TYPE_GENERAL_BIT_EXT | VK_DEBUG_UTILS_MESSAGE_TYPE_VALIDATION_BIT_EXT | VK_DEBUG_UTILS_MESSAGE_TYPE_PERFORMANCE_BIT_EXT;
		createInfo.pfnUserCallback = VulkanDebugCallback;
		createInfo.pUserData = nullptr; // Optional

		auto  pfnVkCreateDebugUtilsMessengerEXT = reinterpret_cast<PFN_vkCreateDebugUtilsMessengerEXT>(vulkan_instance.getProcAddr("vkCreateDebugUtilsMessengerEXT"));

		if (!pfnVkCreateDebugUtilsMessengerEXT)
		{
			logger.Critical() << "CreateDebugUtilsMessenger func address not found!" << Log::end;
		}
		auto result = pfnVkCreateDebugUtilsMessengerEXT(vulkan_instance, &createInfo, nullptr, &VulkanDebugMessenger);


		if (result != VK_SUCCESS)
			logger.Critical() << "Failed to initialize Vulkan Debug Messenger" << Log::end;
		else
			logger << "Vulkan Debug Messenger Created" << Log::end;

	}
	return vulkan_instance;
}

static vk::PhysicalDevice PickBestPhysicalDevice(const std::vector<vk::PhysicalDevice>& availableDevices)
{
	std::map<vk::PhysicalDevice, unsigned int> DeviceScore;

	for (auto& device : availableDevices)
		DeviceScore[device] = 0;

	const std::map<vk::PhysicalDeviceType, int>DeviceTypeScore = {
		{vk::PhysicalDeviceType::eOther,1},
		{vk::PhysicalDeviceType::eIntegratedGpu,4 },
		{vk::PhysicalDeviceType::eDiscreteGpu,5},
		{vk::PhysicalDeviceType::eVirtualGpu,3},
		{vk::PhysicalDeviceType::eCpu,2},
	};
	for (auto& device : availableDevices)
	{
		auto devicetype = device.getProperties().deviceType;
		DeviceScore[device] += DeviceTypeScore.at(devicetype);
	}

	int lastScore = 0;
	vk::PhysicalDevice HighestScoreDevice;

	for (auto& device : DeviceScore)
		if (device.second > lastScore)
		{
			HighestScoreDevice = device.first;
			lastScore = device.second;
		}




	return HighestScoreDevice;
}

QueueFamilyIndicies PickQueues(vk::PhysicalDevice physical_device, vk::SurfaceKHR surface)
{

	const auto AvailableQueues = physical_device.getQueueFamilyProperties();

	QueueFamilyIndicies chosenQueues;


	int i = 0;
	for (const auto& queueFamily : AvailableQueues) {
		if (queueFamily.queueFlags & vk::QueueFlagBits::eGraphics) {
			chosenQueues.Graphics = i;
		}
		if (queueFamily.queueFlags & vk::QueueFlagBits::eCompute) {
			chosenQueues.Compute = i;
		}

		auto PresentSupport = physical_device.getSurfaceSupportKHR(i, surface);

		if (PresentSupport)
			chosenQueues.Present = i;


		i++;
	}




	return chosenQueues;
}
void RenderAPI::InitVulkanDevice()
{


	auto devices = VulkanInstance.enumeratePhysicalDevices();
	if (devices.empty()) {
		logger.Critical() << "Failed to find Vulkan Capable Devices" << Log::end;
	}


	VulkanPhysicalDevice = PickBestPhysicalDevice(devices);

	logger << "Device Chosen: " << VulkanPhysicalDevice.getProperties().deviceName << Log::end;


	const QueueFamilyIndicies DeviceQueues = PickQueues(VulkanPhysicalDevice, MainWindow.GetSurface());

	if (!DeviceQueues.Graphics.has_value())
		logger.Critical() << "Gpu does not support graphics" << Log::end;
	if (!DeviceQueues.Present.has_value())
		logger.Critical() << "Gpu does not support Presentation" << Log::end;;
	if (!DeviceQueues.Compute.has_value())
		logger.Critical() << "Gpu does not support Compute" << Log::end;;

	//std::vector<vk::DeviceQueueCreateInfo> queue_create_infos;
	std::map<uint32_t, vk::DeviceQueueCreateInfo> queue_create_infos;
	std::vector<float> Priorities(10, 1.0f);

	auto AttachQueue = [&](uint32_t FamilyIndex)
	{
		if (queue_create_infos.contains(FamilyIndex))
		{
			queue_create_infos[FamilyIndex].queueCount++;
		}
		else
		{
			vk::DeviceQueueCreateInfo qInfo;
			qInfo.sType = vk::StructureType::eDeviceQueueCreateInfo;
			qInfo.pNext = nullptr;
			qInfo.pQueuePriorities = Priorities.data();
			qInfo.queueCount = 1;
			qInfo.queueFamilyIndex = FamilyIndex;
			queue_create_infos[FamilyIndex] = qInfo;
		}
	};

	AttachQueue(DeviceQueues.Graphics.value());
	AttachQueue(DeviceQueues.Present.value());
	AttachQueue(DeviceQueues.Compute.value());


	std::vector<vk::DeviceQueueCreateInfo> LinearQueueInfos;

	for (auto& entry : queue_create_infos)
		LinearQueueInfos.push_back(entry.second);



	std::vector<const char*> DeviceExtensions = {
	VK_KHR_SWAPCHAIN_EXTENSION_NAME };

	vk::PhysicalDeviceFeatures supportedFeatures = VulkanPhysicalDevice.getFeatures();

	vk::DeviceCreateInfo device_create_info;
	device_create_info.sType = vk::StructureType::eDeviceCreateInfo;
	device_create_info.pQueueCreateInfos = LinearQueueInfos.data();
	device_create_info.queueCreateInfoCount = LinearQueueInfos.size();
	device_create_info.ppEnabledExtensionNames = DeviceExtensions.data();
	device_create_info.enabledExtensionCount = DeviceExtensions.size();
	std::vector<const char*> layers = { "VK_LAYER_KHRONOS_validation",VK_KHR_SWAPCHAIN_EXTENSION_NAME };
	device_create_info.ppEnabledLayerNames = layers.data();
	device_create_info.enabledLayerCount = layers.size();
	device_create_info.pNext = nullptr;
	device_create_info.pEnabledFeatures = &supportedFeatures;

	try
	{
		VulkanDevice = VulkanPhysicalDevice.createDevice(device_create_info);
	}
	catch (vk::SystemError& err)
	{
		logger.Critical() << "Failed to initialize Logical Device for " << VulkanPhysicalDevice.getProperties().deviceName << Log::end;
	}

	logger << "Logical Device Init for " << VulkanPhysicalDevice.getProperties().deviceName << ". "
		<< LinearQueueInfos.size() << " Queue Families" << Log::end;

	return
		RetrieveQueues(DeviceQueues);

}

void RenderAPI::RetrieveQueues(const QueueFamilyIndicies queues)
{
	std::map<int, int> FamilyIndexGetIndex;


	auto GetQueue = [&](uint32_t FamilyIndex)
	{
		vk::Queue q;
		if (FamilyIndexGetIndex.contains(FamilyIndex))
		{
			FamilyIndexGetIndex[FamilyIndex] = 1;

			return VulkanDevice.getQueue(FamilyIndex, 0);
		}
		else
		{
			auto getvalue = FamilyIndexGetIndex[FamilyIndex];
			FamilyIndexGetIndex[FamilyIndex]++;

			return VulkanDevice.getQueue(FamilyIndex, getvalue);
		}
	};

	GraphicsQueue.emplace(GetQueue(queues.Graphics.value()));
	GraphicsQueueFamily.emplace(queues.Graphics.value());
	PresentQueue.emplace(GetQueue(queues.Present.value()));
	PresentQueueFamily.emplace(queues.Present.value());
	ComputeQueue.emplace(GetQueue(queues.Compute.value()));
	ComputeQueueFamily.emplace(queues.Compute.value());

	logger << "Queues Retrieved" << Log::end;
	MakeCmdBuffers();
}

void RenderAPI::MakeCmdBuffers()
{
	auto MakeCmdPool = [&](uint32_t FamilyIndex)
	{
		vk::CommandPoolCreateInfo pool_create_info{};
		pool_create_info.sType = vk::StructureType::eCommandPoolCreateInfo;
		pool_create_info.queueFamilyIndex = FamilyIndex;
		pool_create_info.flags = vk::CommandPoolCreateFlagBits::eResetCommandBuffer;
		return VulkanDevice.createCommandPool(pool_create_info);
	};
	auto MakeCmdBuffer = [&](vk::CommandPool& pool)
	{
		vk::CommandBufferAllocateInfo buffer_allocate_info{};
		buffer_allocate_info.commandPool = pool;
		buffer_allocate_info.level = vk::CommandBufferLevel::ePrimary;
		buffer_allocate_info.commandBufferCount = 1;
		return VulkanDevice.allocateCommandBuffers(buffer_allocate_info).front();
	};

	GraphicsCmdPool = MakeCmdPool(GraphicsQueueFamily.value());
	GraphicsCmdBuffer = MakeCmdBuffer(GraphicsCmdPool);
	PresentCmdPool = MakeCmdPool(PresentQueueFamily.value());
	PresentCmdBuffer = MakeCmdBuffer(PresentCmdPool);
	ComputeCmdPool = MakeCmdPool(ComputeQueueFamily.value());
	ComputeCmdBuffer = MakeCmdBuffer(ComputeCmdPool);
	logger << "Command buffers allocated" << Log::end;
}

void RenderAPI::InitSwapChain()
{
	auto surface = MainWindow.GetSurface();

	//Swap Chain

	//auto surfaceCapability = VulkanPhysicalDevice.getSurfaceCapabilitiesKHR(surface);


	auto formats = VulkanPhysicalDevice.getSurfaceFormatsKHR(surface);
	auto presentModes = VulkanPhysicalDevice.getSurfacePresentModesKHR(surface);
	auto capabilitiy = VulkanPhysicalDevice.getSurfaceCapabilitiesKHR(surface);


	{
		const std::vector<vk::SurfaceFormatKHR> IdealFormats = {
			//{vk::Format::eR32G32B32A32Sfloat,},
			{vk::Format::eR8G8B8A8Unorm,vk::ColorSpaceKHR::eSrgbNonlinear},
			{vk::Format::eB8G8R8A8Srgb,vk::ColorSpaceKHR::eSrgbNonlinear }


		};


		for (auto& possibleFormat : IdealFormats)
			if (std::find(formats.begin(), formats.end(), possibleFormat) != formats.end())
			{
				SwapchainFormat.emplace(possibleFormat);

				break;
			}

		if (!SwapchainFormat.has_value())
		{
			logger.Critical() << "No supported Surface Format was found. Swapchain creation cannot continue \nSupported Formats: \n";
			for (auto& format : formats)
				logger.Critical() << vk::to_string(format.colorSpace) << " " << vk::to_string(format.format) << "\n";
			logger.Critical() << Log::end;

		}

	}



	{
		const std::vector<vk::PresentModeKHR> IdealPresents = {
			vk::PresentModeKHR::eMailbox,
				vk::PresentModeKHR::eFifo


		};

		for (auto& possiblePresentMode : IdealPresents)
			if (std::find(presentModes.begin(), presentModes.end(), possiblePresentMode) != presentModes.end())
			{
				SwapchainPresentMode.emplace(possiblePresentMode);

				break;
			}
		if (!SwapchainPresentMode.has_value())
		{
			logger.Critical() << "No supported present mode was found. Swapchain creation cannot continue\nAvailable Modes: \n";
			for (auto& presentmode : presentModes)
				logger.Critical() << vk::to_string(presentmode) << "\n";
			logger.Critical() << Log::end;
		}

	}


	{
		if (capabilitiy.currentExtent.width != std::numeric_limits<uint32_t>::max())
			SwapchainExtent.emplace(capabilitiy.currentExtent);
		else
		{
			glm::uvec2 WindowSize = MainWindow.GetSize();
			VkExtent2D finalExtent = { WindowSize.x,WindowSize.y };
			finalExtent.width = std::clamp(finalExtent.width, capabilitiy.minImageExtent.width, capabilitiy.maxImageExtent.width);
			finalExtent.height = std::clamp(finalExtent.height, capabilitiy.minImageExtent.height, capabilitiy.maxImageExtent.height);
			SwapchainExtent.emplace(finalExtent);
		}

	}


	{
		uint32_t ImageCount = capabilitiy.minImageCount + 1;
		int maxImageCount = capabilitiy.maxImageCount;
		if (maxImageCount > 0 && ImageCount > maxImageCount)
			ImageCount = maxImageCount;

		SwapchainImageCount.emplace(ImageCount);
	}

	vk::SwapchainCreateInfoKHR swapchain_create_info{};
	std::vector<uint32_t> QueueFamilyIndicies = { GraphicsQueueFamily.value(),PresentQueueFamily.value(),ComputeQueueFamily.value() };
	std::sort(QueueFamilyIndicies.begin(), QueueFamilyIndicies.end());
	QueueFamilyIndicies.erase(std::unique(QueueFamilyIndicies.begin(), QueueFamilyIndicies.end()), QueueFamilyIndicies.end());
	{
		swapchain_create_info.sType = vk::StructureType::eSwapchainCreateInfoKHR;
		swapchain_create_info.surface = surface;
		swapchain_create_info.minImageCount = SwapchainImageCount.value();
		swapchain_create_info.imageFormat = SwapchainFormat->format;
		swapchain_create_info.imageColorSpace = SwapchainFormat->colorSpace;
		swapchain_create_info.imageExtent = SwapchainExtent.value();
		swapchain_create_info.imageArrayLayers = 1;
		swapchain_create_info.imageUsage = vk::ImageUsageFlagBits::eColorAttachment;


		swapchain_create_info.imageSharingMode = vk::SharingMode::eConcurrent;

		swapchain_create_info.queueFamilyIndexCount = QueueFamilyIndicies.size();
		swapchain_create_info.pQueueFamilyIndices = QueueFamilyIndicies.data();


		swapchain_create_info.preTransform = capabilitiy.currentTransform;
		swapchain_create_info.compositeAlpha = vk::CompositeAlphaFlagBitsKHR::eOpaque;

		swapchain_create_info.presentMode = SwapchainPresentMode.value();
		swapchain_create_info.clipped = vk::True;
		swapchain_create_info.oldSwapchain = nullptr;
	}


	swapchain = VulkanDevice.createSwapchainKHR(swapchain_create_info);
	logger << "Swapchain Created: \n	Image Count: " << SwapchainImageCount.value()
		<< "\n	Format: " << vk::to_string(SwapchainFormat->format) << " " << vk::to_string(SwapchainFormat->colorSpace)
		<< "\n	Present Mode: " << vk::to_string(SwapchainPresentMode.value()) << Log::end;




}

void RenderAPI::InitRenderPass()
{

	vk::AttachmentDescription colorAttachment{};
	{

		colorAttachment.format = SwapchainFormat->format;
		colorAttachment.samples = vk::SampleCountFlagBits::e1;
		colorAttachment.loadOp = vk::AttachmentLoadOp::eClear;
		colorAttachment.storeOp = vk::AttachmentStoreOp::eStore;
		colorAttachment.stencilLoadOp = vk::AttachmentLoadOp::eDontCare;
		colorAttachment.stencilStoreOp = vk::AttachmentStoreOp::eDontCare;
		colorAttachment.initialLayout = vk::ImageLayout::eUndefined;
		colorAttachment.finalLayout = vk::ImageLayout::ePresentSrcKHR;
	}


	vk::SubpassDescription subpass{};
	{
		vk::AttachmentReference colorAttachmentRef{};
		colorAttachmentRef.attachment = 0;
		colorAttachmentRef.layout = vk::ImageLayout::eColorAttachmentOptimal;
		subpass.pipelineBindPoint = vk::PipelineBindPoint::eGraphics;
		subpass.colorAttachmentCount = 1;
		subpass.pColorAttachments = &colorAttachmentRef;

	}
	vk::RenderPassCreateInfo renderPassInfo{};
	{
		renderPassInfo.sType = vk::StructureType::eRenderPassCreateInfo;
		renderPassInfo.attachmentCount = 1;
		renderPassInfo.pAttachments = &colorAttachment;
		renderPassInfo.subpassCount = 1;
		renderPassInfo.pSubpasses = &subpass;
	}
	Renderpass = VulkanDevice.createRenderPass(renderPassInfo);
	logger << "RenderPass Created" << Log::end;


}

void RenderAPI::RetrieveSwapchainImages()
{
	//Image & ImageViews
	{
		swapChainImages = VulkanDevice.getSwapchainImagesKHR(swapchain);
		swapChainImageViews.reserve(swapChainImages.size());
		for (auto& image : swapChainImages)
		{
			vk::ImageViewCreateInfo image_view_create_info{};
			image_view_create_info.sType = vk::StructureType::eImageViewCreateInfo;
			image_view_create_info.image = image;
			image_view_create_info.viewType = vk::ImageViewType::e2D;
			image_view_create_info.format = SwapchainFormat->format;
			image_view_create_info.components.r = vk::ComponentSwizzle::eIdentity;
			image_view_create_info.components.g = vk::ComponentSwizzle::eIdentity;
			image_view_create_info.components.b = vk::ComponentSwizzle::eIdentity;
			image_view_create_info.components.a = vk::ComponentSwizzle::eIdentity;
			image_view_create_info.subresourceRange.aspectMask = vk::ImageAspectFlagBits::eColor;
			image_view_create_info.subresourceRange.baseMipLevel = 0;
			image_view_create_info.subresourceRange.levelCount = 1;
			image_view_create_info.subresourceRange.baseArrayLayer = 0;
			image_view_create_info.subresourceRange.layerCount = 1;
			swapChainImageViews.push_back(VulkanDevice.createImageView(image_view_create_info));
		}
	}
	//Framebuffers
	{
		swapChainFramebuffers.reserve(swapChainImageViews.size());
		for (auto& imageView : swapChainImageViews)
		{
			vk::FramebufferCreateInfo framebufferInfo{};
			framebufferInfo.sType = vk::StructureType::eFramebufferCreateInfo;
			framebufferInfo.renderPass = Renderpass;
			framebufferInfo.attachmentCount = 1;
			framebufferInfo.pAttachments = &imageView;
			framebufferInfo.width = SwapchainExtent->width;
			framebufferInfo.height = SwapchainExtent->height;
			framebufferInfo.layers = 1;

			swapChainFramebuffers.push_back(VulkanDevice.createFramebuffer(framebufferInfo));
		}
	}

}

void RenderAPI::CreateSynchronizationObjects()
{
	vk::SemaphoreCreateInfo semaphore_create_info;


	imageAvailableSemaphore = VulkanDevice.createSemaphore(semaphore_create_info);
	renderFinishedSemaphore = VulkanDevice.createSemaphore(semaphore_create_info);

	vk::FenceCreateInfo fence_create_info;
	fence_create_info.flags = vk::FenceCreateFlagBits::eSignaled;
	inFlightFence = VulkanDevice.createFence(fence_create_info);
}

RenderAPI::RenderAPI(const RenderAPIInitDesc& desc) :logger("RenderAPI"), RunSettings(desc), VulkanInstance(InitVulkan()), MainWindow(VulkanInstance)
{
	Instance = this;
	InitVulkanDevice();
	InitSwapChain();
	InitRenderPass();
	RetrieveSwapchainImages();
	CreateSynchronizationObjects();

	auto identity = glm::identity<mat4>();
	uboContent = { identity,identity,identity,identity };

	MVPUbo.emplace(sizeof(MVPUboContents), 0);
	//uboContent.MVP = glm::mat4(0);
	//UpdateMVPUbo();

	Debug::ImguiHandler::Init();

}


void RenderAPI::PreRender()
{
	VulkanDevice.waitForFences({ inFlightFence }, VK_TRUE, UINT64_MAX);
	VulkanDevice.resetFences({ inFlightFence });

	VulkanDevice.acquireNextImageKHR(swapchain, UINT64_MAX, imageAvailableSemaphore, {}, &CurrentImageIndex);
	//VulkanDevice.waitForFences(1, &inFlightFence, VK_TRUE, UINT64_MAX)
	VulkanDevice.resetCommandPool(GraphicsCmdPool);
	GraphicsCmdBuffer.reset();
	vk::CommandBufferBeginInfo command_buffer_begin;

	GraphicsCmdBuffer.begin(command_buffer_begin);

	std::array<vk::ClearValue, 2> clearValues;
	clearValues[0].color = vk::ClearColorValue(0.2f, 0.2f, 0.2f, 0.2f);
	clearValues[1].depthStencil = vk::ClearDepthStencilValue(1.0f, 0);
	vk::RenderPassBeginInfo render_pass_begin;
	render_pass_begin.renderPass = Renderpass;
	render_pass_begin.framebuffer = swapChainFramebuffers[CurrentImageIndex];
	render_pass_begin.renderArea.offset = vk::Offset2D{ 0,0 };
	render_pass_begin.renderArea.extent = SwapchainExtent.value();
	vk::ClearValue clearColor = { {0.0f, 0.0f, 0.0f, 1.0f} };
	render_pass_begin.clearValueCount = 1;
	render_pass_begin.pClearValues = &clearColor;
	GraphicsCmdBuffer.beginRenderPass(render_pass_begin, vk::SubpassContents::eInline);
	//	GraphicsCmdBuffer.beginRenderPass(Renderpass, vk::SubpassContents::eInline);
	const auto windowsize = MainWindow.GetSize();
	GraphicsCmdBuffer.setViewport(0, { vk::Viewport{0,0,(float)windowsize.x,(float)windowsize.y,0,1} });

	GraphicsCmdBuffer.setScissor(0, { vk::Rect2D{{0,0},{windowsize.x,windowsize.y}} });

	ImGui_ImplVulkan_NewFrame();
	ImGui_ImplGlfw_NewFrame();

	ImGui::NewFrame();
	ImGui::ShowDemoWindow();
}
void RenderAPI::PostRender()
{
	
	ImGui::Render();
	
	ImGui_ImplVulkan_RenderDrawData(ImGui::GetDrawData(), GraphicsCmdBuffer);
	GraphicsCmdBuffer.endRenderPass();
	GraphicsCmdBuffer.end();
	vk::SubmitInfo submitInfo{};

	vk::Semaphore waitSemaphores[] = { imageAvailableSemaphore };

	vk::PipelineStageFlags waitStages[] = { vk::PipelineStageFlagBits::eColorAttachmentOutput };
	submitInfo.waitSemaphoreCount = 1;
	submitInfo.pWaitSemaphores = waitSemaphores;
	submitInfo.pWaitDstStageMask = waitStages;
	submitInfo.commandBufferCount = 1;
	submitInfo.pCommandBuffers = &GraphicsCmdBuffer;
	vk::Semaphore signalSemaphores[] = { renderFinishedSemaphore };
	submitInfo.signalSemaphoreCount = 1;
	submitInfo.pSignalSemaphores = signalSemaphores;


	GraphicsQueue.value().GetQueue().submit(submitInfo, inFlightFence);

	vk::PresentInfoKHR presentInfo{};

	presentInfo.waitSemaphoreCount = 1;
	presentInfo.pWaitSemaphores = signalSemaphores;
	presentInfo.swapchainCount = 1;
	presentInfo.pSwapchains = &swapchain;
	presentInfo.pImageIndices = &CurrentImageIndex;
	presentInfo.pResults = nullptr; // Optional
	PresentQueue.value().GetQueue().presentKHR(presentInfo);

}

Landmark::Window& RenderAPI::GetWindow()
{
	return MainWindow;
}

void RenderAPI::OverrideMvpMatrix(const glm::mat4& m)
{
	uboContent.MVP = m;
	UpdateMVPUbo();
}

void RenderAPI::PollEvents()
{
	glfwPollEvents();
}




mat4 RenderAPI::ComputeMVPMatrix()
{
	return uboContent.Proj * uboContent.View * uboContent.Model;
}
