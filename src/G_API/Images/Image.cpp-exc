#include "pch.h"
#include "Image.h"
#include "G_API/Devices/LogicalDevice.h"
Image::Image(const ImageInfo& ci) : imageInfo(ci)
{

	const bool hasZ = ci.dimensions.z > 1;
	const bool hasY = ci.dimensions.y > 1;
	const bool HasLayers = ci.layers > 1;
	if (hasZ && hasY && HasLayers)
		logger.Error("Invalid Image: cannot create a 3D Texture Array");

	vk::ImageCreateInfo image_create_info;
	image_create_info.sType = vk::StructureType::eImageCreateInfo;
	image_create_info.format = static_cast<vk::Format>(imageInfo.format);
	image_create_info.arrayLayers = imageInfo.layers;
	image_create_info.extent = vk::Extent3D(imageInfo.dimensions.x, imageInfo.dimensions.y, imageInfo.dimensions.z);
	image_create_info.mipLevels = imageInfo.mipLevels;
	image_create_info.tiling = static_cast<vk::ImageTiling>(imageInfo.memoryTilling);
	image_create_info.initialLayout = vk::ImageLayout::eUndefined;
	image_create_info.usage = imageInfo.usage;
	image_create_info.sharingMode = vk::SharingMode::eExclusive;
	image_create_info.samples = static_cast<vk::SampleCountFlagBits>(static_cast<uint32_t>(vk::SampleCountFlagBits::e1) << (imageInfo.Samples - 1));
	image_create_info.imageType = ci.dimensions.y > 1 ? (ci.dimensions.z > 1 ? vk::ImageType::e3D : vk::ImageType::e2D) : vk::ImageType::e1D;
	
	image = GetDevice()->createImage(image_create_info).value;

	vk::MemoryRequirements memory_requirements = GetDevice()->getImageMemoryRequirements(image);
	vk::MemoryAllocateInfo memory_allocate_info;
	memory_allocate_info.allocationSize = memory_requirements.size;
	auto supportedMemoryType = GetDevice().GetMemoryTypeThatFits(memory_requirements.memoryTypeBits, VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT);
	memory_allocate_info.memoryTypeIndex = supportedMemoryType.index;
	if (!supportedMemoryType.isValid())
	{
		logger.Error("No compatible memory type found in " + GetDevice().GetName());
		//logger.Error() << "No compatible memory type found in " << GetDevice().GetName() << Log::end;
		return;
	}

	imageMemory = GetDevice()->allocateMemory(memory_allocate_info).value;

	auto result = GetDevice()->bindImageMemory(image, imageMemory, 0);
	//imageMemory = GetOwnerDevice().allocateMemory(memory_allocate_info);
	imageView = MakeImageView(GetDevice(), image, ci);
	logger.Debug("Image Created. TODO: make this more descriptive");
	//logger << "Image Created. TODO: make this more descriptive" << Log::end;
}

Image::Image(vk::Image existingImage, const ImageInfo& image_info)
{
	imageView = MakeImageView(GetDevice(), existingImage, image_info);
}

Image::Image(const Image& o):DeviceResource(o.GetDevice()),image(o.image),imageView(o.imageView),imageMemory(o.imageMemory),imageInfo(o.imageInfo)
{
}

void Image::Destroy()
{
	GetvkDevice().destroyImage(image);
	GetvkDevice().destroyImageView(imageView);
	GetvkDevice().freeMemory(imageMemory);
	
}

vk::ImageView Image::MakeImageView(LogicalDevice& d, vk::Image image, const ImageInfo& image_info)
{
	vk::ImageViewCreateInfo image_view_create_info;
	image_view_create_info.image = image;

	const static vk::ImageViewType nonarrayTypes[] = { vk::ImageViewType::e1D,vk::ImageViewType::e2D ,vk::ImageViewType::e3D };
	const static vk::ImageViewType ArrayTypes[] = { vk::ImageViewType::e1D,vk::ImageViewType::e2D };

	const bool hasZ = image_info.dimensions.z > 1;
	const bool hasY = image_info.dimensions.y > 1;
	const bool HasLayers = image_info.layers > 1;
	

	image_view_create_info.viewType = HasLayers ? ArrayTypes[hasY + hasZ] : nonarrayTypes[hasY + hasZ];
	image_view_create_info.format = static_cast<vk::Format>(image_info.format);
	image_view_create_info.subresourceRange.aspectMask = vk::ImageAspectFlagBits::eColor;
	image_view_create_info.subresourceRange.baseArrayLayer = 0;
	image_view_create_info.subresourceRange.baseMipLevel = 0;
	image_view_create_info.subresourceRange.levelCount = image_info.mipLevels;
	image_view_create_info.subresourceRange.layerCount = image_info.layers;
	return d->createImageView(image_view_create_info).value;
}


/*
Image::~Image()
{
	GetDevice()->freeMemory(imageMemory);
	GetDevice()->destroyImageView(imageView);
	GetDevice()->destroyImage(image);
}
*/
