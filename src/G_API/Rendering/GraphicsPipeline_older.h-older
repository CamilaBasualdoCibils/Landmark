#pragma once
#include <vulkan/vulkan.hpp>
#include <Systems/Logging/Log.h>
#include <map>

namespace Landmark::Core
{
	 class GraphicsPipeline
	 {
		 static inline Log LOGGER = Log("GraphicsPipeline");
	 public:
		 enum ShaderStage
		 {
			 VERTEX = vk::ShaderStageFlagBits::eVertex,
			 GEOMETRY = vk::ShaderStageFlagBits::eGeometry,
			 FRAGMENT = vk::ShaderStageFlagBits::eFragment
		 };
		 enum TopologyType
		 {
			 TOPOLOGY_TRIANGLE = vk::PrimitiveTopology::eTriangleList,
			 TOPOLOGY_LINE = vk::PrimitiveTopology::eLineList
		 };
		 enum CullingMode
		 {
			 CULL_BACK = vk::CullModeFlagBits::eBack,
			 CULL_FRONT = vk::CullModeFlagBits::eFront,
			 CULL_FRONT_AND_BACK = vk::CullModeFlagBits::eFrontAndBack,
			 CULL_NONE = vk::CullModeFlagBits::eNone
		 };
		enum PolygonMode
		{
			POLYGON_FILL = vk::PolygonMode::eFill,
			POLYGON_LINE = vk::PolygonMode::eLine,
			POLYGON_POINT = vk::PolygonMode::ePoint
		};
		enum DepthCompareOp
		{
			DEPTH_OP_NEVER = vk::CompareOp::eNever,
			DEPTH_OP_LESS = vk::CompareOp::eLess,
			DEPTH_OP_EQUAL = vk::CompareOp::eEqual,
			DEPTH_OP_LESS_OR_EQUAL = vk::CompareOp::eLessOrEqual,
			DEPTH_OP_GREATER = vk::CompareOp::eGreater,
			DEPTH_OP_NOT_EQUAL = vk::CompareOp::eNotEqual,
			DEPTH_OP_GREATER_OR_EQUAL = vk::CompareOp::eGreaterOrEqual,
			DEPTH_OP_ALWAYS = vk::CompareOp::eAlways
		};
	 private:
		 vk::PipelineLayout PipelineLayout;
		 vk::Pipeline graphicsPipeline;

	 	std::map<ShaderStage,vk::ShaderModule> ShaderModules;
		 std::vector<vk::DynamicState> DynamicStates = { vk::DynamicState::eViewport,vk::DynamicState::eScissor };
		 TopologyType TopologyMode =TOPOLOGY_TRIANGLE;

		 uint32_t ViewportCount = 1;
		 uint32_t ScissorCount = 1;

		 CullingMode cullingMode = CULL_NONE;
		 float LineWidth = 1.0f;
		 PolygonMode polygonMode = POLYGON_FILL;
		 bool DiscardEnable = false;
		 bool DepthClampEnable = true;

		 bool DepthTestingState = true;
		 bool DepthWritingState = true;
		 DepthCompareOp DepthComparingOperation = DEPTH_OP_LESS_OR_EQUAL;

	 public:

		 vk::Pipeline GetPipeline() const { return graphicsPipeline; }
		 vk::PipelineLayout GetLayout() const { return PipelineLayout; }

		 GraphicsPipeline& AttachModule(ShaderStage stage, const std::vector<char>& src);
		 GraphicsPipeline& SetDynamicStates(std::initializer_list<vk::DynamicState> States);
		 GraphicsPipeline& DefineInputAssembly(TopologyType _TopologyType);
		 GraphicsPipeline& SetViewportState(uint32_t _ViewportCount, uint32_t _ScissorCount);

		 
		//Rasterizer Shit
		 GraphicsPipeline& Raz_SetCullMode(CullingMode _mode);
		 GraphicsPipeline& Raz_SetLineWidth(float _LineWidth);
		 GraphicsPipeline& Raz_PolygonMode(PolygonMode _PolygonMode);
		 GraphicsPipeline& Raz_DiscardEnable(bool state);
		 GraphicsPipeline& Raz_DepthClampEnable(bool state);


		 GraphicsPipeline& SetDepthState(bool _DepthTestingEnable, bool _DepthWritingEnable, DepthCompareOp _CompareOp);


		 void Build();
	 };

}
