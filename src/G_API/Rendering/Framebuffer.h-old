#pragma once
#include "G_API/Images/Image.h"
#include <G_API/Devices/DeviceResource.h>

class RenderPass;
class  Framebuffer final : DeviceResource
{
	vk::Framebuffer framebuffer;
	std::vector<Image> images;
public:

	Framebuffer(RenderPass& rp, glm::uvec2 dimensions, const std::vector<ColorFormat> formats);
	/**
	 * \brief Creates a framebuffer from an existing image
	 * \param rp
	 */
	Framebuffer(RenderPass& rp, vk::Image, const Image::ImageInfo&);
	Framebuffer(const Framebuffer& fb);
	vk::Framebuffer GetVkFramebuffer() const { return framebuffer; }
private:
	static vk::Framebuffer MakeFramebuffer(LogicalDevice& device, const std::vector<Image>& images, RenderPass& rp, const Image::ImageInfo& image_info);

public:
	void Destroy() override;
};


