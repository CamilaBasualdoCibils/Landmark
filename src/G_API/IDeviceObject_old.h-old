#pragma once
#include "Systems/Logging/Log.h"

namespace Landmark::Graphics
{
	class  IDeviceObject
	{
		vk::Device& Owner_Device;
		vk::PhysicalDevice& Owner_PhysicalDevice;
		 Log logger;
	public:
		IDeviceObject();

		vk::Device& GetOwnerDevice();
		vk::PhysicalDevice& GetOwnerPhysicalDevice();

		const vk::Device& GetOwnerDevice() const;

		const vk::PhysicalDevice& GetOwnerPhysicalDevice() const;

	protected:

		Log& GetLogger() { return logger; }
		/*
		std::pair<vk::MemoryType,uint32_t> GetMemoryType(vk::MemoryPropertyFlags memoryType)
		{
			const auto availableMemoryTypes = GetOwnerPhysicalDevice().getMemoryProperties();
			for (int i = 0; i < availableMemoryTypes.size(); i++)
			{
				if ((memoryRequirements.memoryTypeBits & (1 << i)) &&
					(physicalDeviceMemoryRequirements.memoryTypes[i].propertyFlags == (vk::MemoryPropertyFlagBits::eHostVisible | vk::MemoryPropertyFlagBits::eHostCoherent)))
				{
					_MemoryType = physicalDeviceMemoryRequirements.memoryTypes[i];
					ChosenMemoryType = i;
					break;
				}
			}
		}*/
	};


}
