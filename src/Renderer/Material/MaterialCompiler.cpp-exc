#include "pch.h"
#include "MaterialCompiler.h"
#include "IO/Resource.h"

#include <glslang/SPIRV/GlslangToSpv.h>
void Landmark::Render::MaterialCompiler::Start()
{
	LOGGER.Debug("beginning material compilation");

	auto shaderbinDirectory = Resource::GetFolder("ShaderBin");

#ifdef _DEBUG
	if (shaderbinDirectory.Exists())
	{
		shaderbinDirectory.Erase();
	}

#endif

	if (!shaderbinDirectory.Exists())
		shaderbinDirectory.Create();

	auto device = Graphics::RenderAPI::GetInstance()->GetPhysicalDevice();
	auto properties = device.getProperties();
	std::string folderDriverName = std::to_string(properties.deviceID) + "-" + std::to_string(properties.driverVersion);

	auto shaderbin = shaderbinDirectory.GetFolder(folderDriverName);
	if (!shaderbin.Exists())
		shaderbin.Create();


	auto uncompiledShaderFolder = IO::Resource::GetFolder("Materials");

	FolderSearch(uncompiledShaderFolder);

}

void Landmark::Render::MaterialCompiler::FolderSearch(IO::Folder& f)
{
	for (auto& file : f.GetFiles())
	{
		const auto& filename = file.GetName();
		if (0 == filename.compare(filename.length() - MaterialDescFileFormat.length(), MaterialDescFileFormat.length(), MaterialDescFileFormat))
		{
			//file ends with MaterialDescFileFormat
			//std::cout << filename << std::endl;
			auto material_Infos = ParseMaterialFile(file);

			for (auto& mat_Info : material_Infos)
			{
				LOGGER << "compiling " << mat_Info.Name << "::" << file.GetName() << Log::end;
				CompileMaterial(mat_Info, f);
			}
				
		}
	}

	for (auto& folder : f.GetSubFolders())
		FolderSearch(folder);
}





std::vector<Landmark::Render::MaterialCompiler::Material_Info> Landmark::Render::MaterialCompiler::ParseMaterialFile(IO::File& materialFile)
{
	//const static std::string ErrorBegin = "Error in (" + materialFile.GetName() + "): ";
	auto filecontent = materialFile.GetContent_Text();
	nlohmann::json jsonData = nlohmann::json::parse(filecontent);


	auto materials = jsonData.items();


	if (!jsonData.contains("materials"))
	{
		LOGGER.Error() << "Material Json file has no materials??? (" << materialFile.GetName() << ")" << Log::end;
		return {};
	}


	std::vector<Material_Info> material_infos;
	for (auto& materialDesc : materials.begin().value().items())
	{

		bool MaterialCanceled = false;

		std::vector<std::string> Errors;

		Material_Info MatInfo;

		auto ReportError = [&](std::string Error)
		{
			Errors.push_back(Error);
		};
		auto CheckVariable = [&](nlohmann::detail::iteration_proxy_value<nlohmann::detail::iter_impl<nlohmann::basic_json<>>> desc, std::string VariableName) {
			// Inner function (lambda)
			if (!desc.value().contains(VariableName))
			{
				ReportError("No (" + VariableName + ")");
				MaterialCanceled = true;
				return false;
			}
			return true;
		};

		auto& MaterialContent = materialDesc.value();


		//if material has name
		if (CheckVariable(materialDesc, MaterialName_VarName))
			MatInfo.Name = MaterialContent.at(MaterialName_VarName);

		//if material has stages
		if (CheckVariable(materialDesc, Stages_VarName))
		{
			auto& Stages = MaterialContent.at(Stages_VarName);
			auto StageCount = Stages.size();

			std::vector<Material_Stage_Info> stage_infos;
			stage_infos.reserve(StageCount);

			for (auto& stage : Stages.items())
			{
				auto& StageContent = stage.value();
				//std::cout << stage << std::endl;
				Material_Stage_Info stage_info;

				//if stage has type var
				if (CheckVariable(stage, Stages_Type_VarName))
				{
					std::string StringStageType = StageContent.at(Stages_Type_VarName);
					for (auto& C : StringStageType)
						C = toupper(C);

					if (!StageLookUp.contains(StringStageType))
					{
						ReportError(" stage type (" + StringStageType + ") is unknown and invalid");
					}
					else
						stage_info.stageType = StageLookUp.at(StringStageType);

				}

				//if stage has source declared
				if (CheckVariable(stage, Stages_SourceFile_VarName))
					stage_info.FileSource = StageContent.at(Stages_SourceFile_VarName);

				if (CheckVariable(stage, Stages_Entry_VarName))
					stage_info.Entry = StageContent.at(Stages_Entry_VarName);

				stage_infos.push_back(stage_info);
			}

			MatInfo.Stage_Infos.insert(stage_infos.begin(), stage_infos.end());

		}

		if (!Errors.empty())
		{
			std::stringstream ss;
			ss << "Errors in material (" + MatInfo.Name + ") in file (" + materialFile.GetContent_Text() + "):\n";
			for (auto& str : Errors)
				ss << str + "\n";

			LOGGER.Error( ss );
		}


		if (!MaterialCanceled)
			material_infos.push_back(MatInfo);

	}

	return material_infos;
}

void MaterialCompiler::CompileMaterial(const Material_Info& material_info, Folder TargetFolder)
{
	

}
