
#pragma once
#include <pch.h>
#include <VK/Rendering/RenderPass.h>
#include <VK/Rendering/Swapchain.h>
#include <Core/Window.h>
#include <VK/Buffers/VertexBuffer.h>
#include <VK/Buffers/IndexBuffer.h>
#include <VK/Devices/MainDevice.h>
#include <VK/Operations/CommandBuffer.h>
#include <Core/AppModule.h>
#include <Debug/Imgui.h>
#include <VK/Rendering/Pipeline.h>
#include <VK/Descriptors/DescriptorSetLayout.h>
#include <VK/Descriptors/DescriptorSet.h>
#include <VK/Buffers/UniformBuffer.h>
#include <Renderer/Camera.h>
#include <Renderer/Mesh.h>
#include <Rendering/Frame.h>
#include <Rendering/Lens.h>
#include <Rendering/Stage.h>
class Renderer : public AppModule
{


    std::optional<RenderPass> render_pass;
    std::optional<Swapchain> swapchain;
    uint32_t current_swapchain_image_index = 0;
    std::shared_ptr<LWindow> window;
    std::shared_ptr<MainDevice> main_device;
    std::optional<CommandPool> rendering_cmd_pool;
    std::optional<CommandBuffer> rendering_main_cmd_buffer;
    std::optional<Fence> image_fetching_fence,render_in_flight_fence;
    std::optional<Semaphore> image_ready_semaphore,rendering_finished_semaphore;
    const Format format = Format::BGRA8unorm;
    const ColorSpace color_space_ = ColorSpace::SRGB_NON_LINEAR;
    Imgui imgui;
    std::optional<Stage> entity_stage;
    std::weak_ptr<Lens> entity_lens;
    std::weak_ptr<Frame> entity_frame;
    std::weak_ptr<Film> entity_film;

public:
    void Init(std::shared_ptr<LWindow> window);
    void RenderEntity(Camera& camera);
    void RenderBegin();
    void RenderEnd();
    void InitImgui();
    std::vector<EngineCallInject> GetInjections() override;
    Renderer();
    decltype(entity_frame)& GetEntityFrame() {return entity_frame;}
};