
#include <pch.h>
#include "Renderer.h"

#include <Debug/Imgui.h>
#include <VK/Descriptors/DescriptorPool.h>

#include "Core/App.h"
#include "IO/IO.h"
#include <Renderer/EditorTools/EditorViewport.h>
#include <Debug/Editor.h>

void Renderer::Init(std::shared_ptr<LWindow> _window)
{
    window = _window;
    LASSERT(window, "No window was supplied to renderer");
    main_device = App::GetInstance()->GetMainDevice();
    image_fetching_fence.emplace();
    image_ready_semaphore.emplace();
    render_in_flight_fence.emplace(true);
    rendering_finished_semaphore.emplace();

    {
        RenderPass::Renderpass_Properties rp_properties;
        RenderPass::attachment present_color_att;
        present_color_att.format = format;
        present_color_att.initialLayout = ImageLayouts::UNDEFINED;
        present_color_att.finalLayout = ImageLayouts::PRESENT_SRC;
        RenderPass::subpass subpass;
        subpass.bind_point = PipelineBindPoint::GRAPHICS;
        subpass.color_attachments = {{0, ImageLayouts::COLOR_ATTACHMENT}};
        rp_properties.color_attachments.push_back(present_color_att);
        rp_properties.subpasses.push_back(subpass);
        render_pass.emplace(rp_properties);
    }
    {
        auto capabilities = main_device->GetPresentModes(window->GetSurface());
        Swapchain::SwapchainProperties swap_prop;
        swap_prop.colorFormat = format;
        swap_prop.colorSpace = color_space_;
        swap_prop.presentMode = PresentModes::IMMEDIATE;
        if (main_device->GetPresentQueue().GetFamilyID() != main_device->GetGraphicsQueue().GetFamilyID())
        {
            swap_prop.sharingQueues.emplace();
            swap_prop.sharingQueues->push_back(main_device->GetPresentQueue());
            swap_prop.sharingQueues->push_back(main_device->GetGraphicsQueue());
        }
        swapchain.emplace(swap_prop, render_pass.value(), window->GetSurface());
    }
    {
        rendering_cmd_pool.emplace(main_device->GetGraphicsQueue());
        rendering_main_cmd_buffer.emplace(*rendering_cmd_pool);
        rendering_main_cmd_buffer->Begin();
    }

    InitImgui();
    Editor::Init();

    Editor::GetMainToolGroup().GetOrPushGroup("Windows").PushObject<EditorViewport>(0, this);
    {
        VertexFormat vf;
        stage_properties s_p;
        DescriptorSetLayoutBinding binding;
        binding.type = DescriptorTypes::UNIFORM_BUFFER;
        binding.descriptorCount = 1;
        s_p.descriptor_set_layouts_bindings = {binding};

        VertexFormat::Buffer_list vertex_input;
        vertex_input.emplace_back();
        vertex_input.back().emplace_back();
        vertex_input.back().back().attributes = {{StageDataType::FLOAT3, 0}};
        s_p.vertexFormat.buffer_inputs = vertex_input;
        entity_stage.emplace(s_p);
        entity_stage->AllocateForDataNow({1500,1500,1500},*rendering_cmd_pool);
    }
    {

        lens_properties lens_prop;
        {
            // one default attachment
            lens_prop.color_attachments = {RenderPass::attachment{Format::BGRA8unorm}};
            lens_prop.color_attachments.back().finalLayout = ImageLayouts::SHADER_READ_ONLY;
            Folder shader_folder = IO::GetResources().GetFolder("shaders");
            lens_prop.shaderStages[ShaderStage::VERTEX] = shader_folder.GetFile("test.vert.spv").ReadBinary();
            lens_prop.shaderStages[ShaderStage::FRAGMENT] = shader_folder.GetFile("test.frag.spv").ReadBinary();
        }

        entity_lens = entity_stage->makeLens(lens_prop);
        frame_properties frame_prop;
        {
            uvec2 dimensions = window->GetSize();
            frame_prop.dimensions = {dimensions.x, dimensions.y, 1};
            frame_prop.lens_subpass_id = 0;
        }

        entity_frame = entity_lens.lock()->makeFrame(frame_prop);
        film_properties proj_prop;
        proj_prop.surface = window->GetSurface();
        entity_film = entity_lens.lock()->makeFilm(proj_prop);
        {
            std::vector<vec3> vertices = {
                {-0.5f, -0.5f, -0.5f}, // 0: bottom-left-back
                {0.5f, -0.5f, -0.5f},  // 1: bottom-right-back
                {0.5f, 0.5f, -0.5f},   // 2: top-right-back
                {-0.5f, 0.5f, -0.5f},  // 3: top-left-back
                {-0.5f, -0.5f, 0.5f},  // 4: bottom-left-front
                {0.5f, -0.5f, 0.5f},   // 5: bottom-right-front
                {0.5f, 0.5f, 0.5f},    // 6: top-right-front
                {-0.5f, 0.5f, 0.5f}    // 7: top-left-front
            };

            // Define the indices for the cube's 12 triangles (2 per face)
            std::vector<unsigned int> indices = {
                // Back face
                0, 1, 2,
                2, 3, 0,
                // Front face
                4, 5, 6,
                6, 7, 4,
                // Left face
                0, 3, 7,
                7, 4, 0,
                // Right face
                1, 5, 6,
                6, 2, 1,
                // Bottom face
                0, 4, 5,
                5, 1, 0,
                // Top face
                3, 2, 6,
                6, 7, 3};
            entity_stage->getVertexData().resize(vertices.size() * sizeof(vec3));
            std::memcpy(entity_stage->getVertexData().data(), vertices.data(), vertices.size() * sizeof(vec3));
            entity_stage->getIndexData().resize(indices.size() * sizeof(unsigned int));
            std::memcpy(entity_stage->getIndexData().data(), indices.data(), indices.size() * sizeof(unsigned int));

            rendering_main_cmd_buffer->Begin();
            entity_stage->TransferData(*rendering_main_cmd_buffer);
        }
    }
}
void Renderer::RenderBegin()
{
    imgui.NewFrame();
    // TEST

    render_in_flight_fence->WaitAndReset();
    rendering_main_cmd_buffer->Reset();
    current_swapchain_image_index = swapchain->AcquireNextImage({image_ready_semaphore});

    // image_fetching_fence->WaitAndReset();
    if (!rendering_main_cmd_buffer->HasBegun())
        rendering_main_cmd_buffer->Begin();

    const glm::uvec2 window_size = swapchain->GetExtent();
    rendering_main_cmd_buffer->BeginRenderPass(*render_pass, swapchain->GetFramebuffer(current_swapchain_image_index), {{0, 0}, {window_size.x, window_size.y}});
    (*rendering_main_cmd_buffer)->setScissor(0, {{{0, 0}, {window_size.x, window_size.y}}});
    (*rendering_main_cmd_buffer)->setViewport(0, {vk::Viewport{0, 0, (float)window_size.x, (float)window_size.y, 0, 1}});
    Editor::Draw();
    imgui.EndFrame();
    imgui.Render(*rendering_main_cmd_buffer);
}
void Renderer::RenderEnd()
{

    rendering_main_cmd_buffer->EndRenderPass();

    entity_stage->TransferData(*rendering_main_cmd_buffer);
    Stage::CaptureProperties cap_properties;
    cap_properties.viewports.push_back(Viewport({0, 0}, {1000, 1000}));
    entity_stage->Capture(entity_lens, entity_frame, *rendering_main_cmd_buffer, cap_properties);
    rendering_main_cmd_buffer->End();
    rendering_main_cmd_buffer->Submit({*image_ready_semaphore}, {*rendering_finished_semaphore}, render_in_flight_fence);
    bool swapchain_out_of_date;
    main_device->GetPresentQueue().Present(current_swapchain_image_index, &swapchain_out_of_date, *swapchain, {*rendering_finished_semaphore});
}

void Renderer::InitImgui()
{
    imgui.Init(*App::GetInstance()->GetMainInstance().get(), *main_device.get(), main_device->GetGraphicsQueue(), *render_pass, *window.get(), format);
}

std::vector<AppModule::EngineCallInject> Renderer::GetInjections()
{
    std::vector<EngineCallInject> injections;

    AppModule::EngineCallInject render_begin("Renderer render_begin");
    render_begin.call = std::bind(&Renderer::RenderBegin, this);
    render_begin.call_point = AppModule::EngineCallPoints::RENDER;
    render_begin.priority = 50;
    injections.push_back(render_begin);

    AppModule::EngineCallInject render_exit("Renderer render_end");
    render_exit.call = std::bind(&Renderer::RenderEnd, this);
    render_exit.call_point = AppModule::EngineCallPoints::RENDER;
    render_exit.priority = -50;
    injections.push_back(render_exit);

    return injections;
}
Renderer::Renderer()
{
}