#pragma once
#include <stdint.h>
#include <vector>
#include <map>
#include "DynamicMemory.h"
template <typename T, typename IndexType = uint32_t, bool NullMemory = false>
class ObjectAllocator
{
	/*
	struct SpaceFiller
	{
		char data[sizeof(T)];
	};*/


	


	DynamicMemory<T, NullMemory> Data;
	//VectorAllocator<SpaceFiller> allocator = VectorAllocator<SpaceFiller>(this);
protected:
	std::map<IndexType, IndexType> EmptySlots;
	//std::vector<SpaceFiller, VectorAllocator<SpaceFiller>> rawData = std::vector<SpaceFiller, VectorAllocator<SpaceFiller>>(1,allocator);
	//std::vector<T>& data = reinterpret_cast<std::vector<T>&>(rawData);

	//marks where an empty slot begin and how long it is
	

public:
	ObjectAllocator()
	{
	
	}
	/*
	ObjectAllocator(ObjectAllocator&& other) noexcept : rawData(other.rawData), data(other.data), EmptySlots(other.EmptySlots)
	{

	}*/
	class const_iterator
	{
	protected:
		const ObjectAllocator* container;
		IndexType index;
		//std::vector<SpaceFiller>::iterator vectorIterator;
	public:
		const_iterator(IndexType _index, const ObjectAllocator* _container) :container(_container),
			//vectorIterator(container->rawData.begin()),
			index(_index)
		{

			//vectorIterator += _index;
		}
		const_iterator() :container(nullptr), index(0) {}
		//iterator(typename std::vector<SpaceFiller>::iterator it,ObjectAllocator* container) :container(container),vectorIterator(it) {}
		const_iterator(const const_iterator& o) :
			container(o.container), index(o.index) {}
		constexpr IndexType Index() const { return index; }

		const_iterator& operator++(int)
		{
			const_iterator copy = *this;
			++(*this);
			return copy;
		}

		const_iterator& operator++()
		{

			index++;

			while (true)
			{
				const auto mark = container->isOccupied(*this);
				if (mark.first)
					break;

				index += mark.second->second;
				//TODO: doesnt account that index might not be at the beginning of empty slot
			}

			return *this;
		}
		constexpr bool isValid() const { return container && *this >= container->begin() && *this < container->end() && !container->isOccupied(*this).first; }
		const T& operator*() const { return reinterpret_cast<T&>(container->Data[Index()]); }
		constexpr bool operator==(const const_iterator& o) const { return index == o.index; }
		constexpr bool operator!=(const const_iterator& o) const { return !operator==(o); }
		constexpr bool operator<(const const_iterator& o) const { return Index() < o.Index(); }
		constexpr bool operator>=(const const_iterator& o) const { return Index() >= o.Index(); }
	};
	class iterator : public const_iterator
	{
	private:
		ObjectAllocator* container;
	public:

		iterator(IndexType _index, ObjectAllocator* _container):const_iterator(_index,_container),container(_container) {}
		iterator():const_iterator(),container(nullptr){}
		T& operator*() const { return reinterpret_cast<T&>(container->Data[const_iterator::Index()]); }
	};



	void UnmarkEmptyRange(IndexType where, IndexType length)
	{
		
		//TODO: THIS DOESNT CHECK FOR FRESHLY JOINED NODES
		if (EmptySlots.contains(where))
			EmptySlots.erase(where);
		//EmptySlots.insert(std::make_pair(where,length));
		//auto emptyiterator = EmptySlots.upper_bound(where);
		//no entries means no empty slots
		//if (emptyiterator == EmptySlots.end() || emptyiterator == EmptySlots.begin())
		//{
			
		//	return;
		//}
	}
	void MarkEmptyRange(IndexType where, IndexType length)
	{
		//TODO: THIS DOESNT CHECK FOR SPLITTING
		if (!EmptySlots.empty())
		{
			auto emptyiterator = EmptySlots.upper_bound(where);
			//no entries means no empty slots
			if (emptyiterator != EmptySlots.end() && emptyiterator != EmptySlots.begin() &&
				where - (--emptyiterator)->first < emptyiterator->second)
			{
				const int distanceBetweenEntries = where - emptyiterator->first;
				emptyiterator->second += length - (emptyiterator->second - distanceBetweenEntries);
				return;
			}
		}
		//EmptySlots.insert({where, length});
		EmptySlots[where] = length;
		

	}

	bool Contains(IndexType index) const
	{
		auto emptyiterator = EmptySlots.upper_bound(index);
		//no entries means no empty slots
		if (EmptySlots.empty()) return true;
		//if is begin then no empty slots before or at index
		if (emptyiterator == EmptySlots.begin()) return true;
		//get entry before this one
		--emptyiterator;
		//if this index fits in its span. then it is marked as empty
		if (index - emptyiterator->first < emptyiterator->second)
			return false;


		return true;
	}
	iterator Push(const T& val)
	{
		EnsureSpace();

		const auto emptySlot = EmptySlots.begin();

		const IndexType insertIndex = emptySlot->first + emptySlot->second - 1;
		UnmarkEmptyRange(insertIndex, 1);
		

		Data[insertIndex] = val;

		return iterator(insertIndex, this);

	}

	template<typename... Args>
	iterator Push_Emplace(Args&&... args)
	{
		EnsureSpace();

		const auto emptySlot = EmptySlots.begin();

		const IndexType insertIndex = emptySlot->first + emptySlot->second - 1;
		UnmarkEmptyRange(insertIndex, 1);


		//T* newEntry = new (&Data[insertIndex]) T(std::forward<Args>(args)...);
		Data.Construct(insertIndex, std::forward<Args>(args)...);
		//data[insertIndex].T(std::forward<Args>(args...));

		return iterator(insertIndex, this);

	}
	iterator Insert(IndexType where,const T& v)
	{
		if (isOccupied(where).first)
			Data.Destroy(where);
			
		
		else
			UnmarkEmptyRange(where, 1);

		Data[where] = v;
		return iterator(where, this);
	}
	iterator Insert(const iterator& where,const T& val)
	{
		return Insert(where.Index());
	}
	template<typename... Args>
	iterator Insert_Emplace(IndexType where, Args&&... args)
	{
		if (isOccupied(where).first)
			Data.Destroy(where);
			//data[where].~T();

		else
			UnmarkEmptyRange(where, 1);


		//T* newEntry = new (&data[where]) T(std::forward<Args>(args)...);
		Data.Construct(where, std::forward<Args>(args)...);
		return iterator(where, this);
	}
	template<typename... Args>
	iterator Insert_Emplace(const iterator& where, Args&&... args)
	{
		return Insert(where.Index());
	}


	void Erase(iterator where)
	{
		Erase(where.Index());
	}

	void Erase(IndexType where)
	{
		if (where < 0 || where >= Data.size())
			throw std::out_of_range("Iterator is out of range");

		if (isOccupied(where).first)
		MarkEmptyRange(where, 1);

		if (std::is_destructible<T>::value)
			Data.Destroy();

	}


	decltype(auto) isOccupied(const_iterator where) const
	{
		return isOccupied(where.Index());
	}
	decltype(auto) isOccupied(IndexType where) const
	{
		auto emptyiterator = EmptySlots.upper_bound(where);
		//no entries means no empty slots
		if (emptyiterator != EmptySlots.end() && emptyiterator != EmptySlots.begin() &&
			where - (--emptyiterator)->first < emptyiterator->second)
		{
			return std::make_pair(false ,emptyiterator);
		}
		return std::make_pair(true, EmptySlots.end());
	}
	const_iterator begin() const
	{
		const_iterator it(0, this);

		if (!isOccupied(0).first)
			++it;
		return it;
	}
	const_iterator end() const
	{
		//iterator it ()
		return const_iterator(Data.size(), this);
		//return iterator(rawData.end(), this);
	}

	iterator begin() 
	{
		iterator it( 0,this);
		
		if (isOccupied(0).first)
			++it;
		return it;
	}
	iterator end() 
	{
		//iterator it ()
		return iterator(Data.size(),this);
		//return iterator(rawData.end(), this);
	}

	iterator iteratorAt(IndexType index) 
	{
		return iterator(index, this);
	}


	T& operator[](IndexType where)
	{
		if (!isOccupied(where).first) throw std::out_of_range("Index is empty");
		return Data[where];
	}
	const T& operator[](IndexType where) const
	{
		if (!isOccupied(where).first) throw std::out_of_range("Index is empty");
		return Data[where];
	}
private:

	void EnsureSpace()
	{
		//if no empty slots, add one to the end, vector will manage space and allocator will auto add empty slots
		if (EmptySlots.empty())
		{
			Data.Grow(Data.size()*2);
			//rawData.emplace_back();
			//rawData.resize(rawData.capacity());
		}
			
		//if by the end of this there are still no empty slots then you're fucked
	}

};
