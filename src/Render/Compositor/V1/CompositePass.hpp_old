#pragma once
#include "CompositeLayer.hpp"
#include <pch.h>
namespace Render
{
template < typename PayloadType,typename Output> class CompositePass : public CompositeLayer<Output>
{

    std::vector<std::shared_ptr<CompositeLayer<PayloadType>>> Layers;

  public:
    Output Compose(const Output &in) override
    {
        PayloadType payload;
        for (auto& Layer : Layers)
        {
            Layer->Compose(payload);
        }
        return in;
    }
    template <typename T> std::shared_ptr<T> insert()
    {
        std::shared_ptr<T> newObject = std::make_shared<T>();
        Layers.push_back(newObject);
        return newObject;
    }
};
} // namespace Render
