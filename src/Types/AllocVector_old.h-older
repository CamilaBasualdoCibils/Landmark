//------------------------------------------------------------------------------
// File Name: AllocVector.h
// Author(s): Camila Basualdo Cibils 
// Vector that acts as memory manager, on insert objects stay in place relative to beginning
// of vector. Erasing Marks a space as empty, ready to be overwritten
//------------------------------------------------------------------------------
/*
 ___   _______  _______    __   __  ___   __    _  _______
|   | |       ||       |  |  |_|  ||   | |  |  | ||       |
|   | |_     _||  _____|  |       ||   | |   |_| ||    ___|
|   |   |   |  | |_____   |       ||   | |       ||   |___
|   |   |   |  |_____  |  |       ||   | |  _    ||    ___|
|   |   |   |   _____| |  | ||_|| ||   | | | |   ||   |___
|___|   |___|  |_______|  |_|   |_||___| |_|  |__||_______|
 ______   _______  __    _  _______    _______  _______  __   __  _______  __   __
|      | |       ||  |  | ||       |  |       ||       ||  | |  ||       ||  | |  |
|  _    ||   _   ||   |_| ||_     _|  |_     _||   _   ||  | |  ||       ||  |_|  |
| | |   ||  | |  ||       |  |   |      |   |  |  | |  ||  |_|  ||       ||       |
| |_|   ||  |_|  ||  _    |  |   |      |   |  |  |_|  ||       ||      _||       |
|       ||       || | |   |  |   |      |   |  |       ||       ||     |_ |   _   |
|______| |_______||_|  |__|  |___|      |___|  |_______||_______||_______||__| |__|

*/

#pragma once
#include <vector>
#include <set>
#include <limits>
#include <iostream>
#include "DynamicMemory.h"
/**
 * \tparam T Storage Type
 * \tparam PosType Data Type used for indexing, unsigned long long is default
 * \tparam NullMemory Set Memory to NULL on erase
 */
template <typename T, typename PosType, bool NullMemory = false>
class AllocVector_base
{

	DynamicMemory_Base<T, PosType, NullMemory> data;
	std::set<PosType> markers;
	const size_t maxSize = std::numeric_limits<PosType>().max();
	friend class iterator;

	//using AllocType = AllocVector<T, PosType, NullMemory>;
public:

	class iterator
	{
		PosType DataIndex;
		//Owner
		AllocVector_base* Owner;

	public:
		iterator() :Owner(nullptr), DataIndex(-1) {};
		iterator(AllocVector_base* _Owner, PosType _Index) : Owner(_Owner), DataIndex(_Index)
		{
		}
		/*
		template <typename O>
		iterator(O& other) :
			Owner(reinterpret_cast<AllocVector_base*>(static_cast<void*>(other.GetOwner())))
			, DataIndex(other.GetIndex())
		{

		}*/
		bool isValid() const { return Owner; }
		bool operator!=(const iterator& other) const
		{
			return DataIndex != other.GetIndex();
		}
		bool operator<(const iterator& other) const
		{
			return DataIndex < other.GetIndex();
		}
		bool operator==(const iterator& other) const
		{
			return !(operator!=(other));
		}
		iterator& operator=(const iterator& other)
		{
			DataIndex = other.GetIndex();
			Owner = other.GetOwner();
			return *this;
		};

		PosType GetIndex() const { return DataIndex; }
		AllocVector_base* GetOwner() const { return Owner; }
		T& operator*()
		{
			//return (*Owner)[DataIndex];
			return Owner->operator[](DataIndex);
		}
		T& operator->()
		{

			return operator*();
		}
		const T& operator*() const
		{
			//return (*Owner)[DataIndex];
			return Owner->operator[](DataIndex);
		}
		const T& operator->() const
		{
			return operator*();
		}


		//number of existing elements to shift by
		void ShiftBy(int shift)
		{

			auto& DataRef = Owner->data;
			std::set<PosType>& MarkerRef = Owner->markers;
			const short Direction = shift > 0 ? 1 : -1;
			for (int i = 0; i < shift; i++)
			{
				DataIndex += Direction;
				while (MarkerRef.contains(DataIndex)) DataIndex++;
			}

		}


		iterator& operator++()
		{
			ShiftBy(1);
			return *this;
		}
		iterator& operator+=(PosType shift)
		{
			ShiftBy(shift);
			return *this;
		}
		iterator& operator--()
		{
			ShiftBy(-1);
			return *this;
		}

		iterator& operator-=(PosType shift)
		{
			ShiftBy(-shift);
			return *this;
		}


	};

private:
	iterator GetPushLocation()
	{
		if (markers.empty())
		{
			if (data.Size() >= maxSize)
			{
				throw std::range_error("Max Capacity Reached");
			}
			return end();
		}
		else
		{
			return iterator(this, *markers.begin());
		}
	}
	size_t EnsureSpace(PosType NewInsertion)
	{
		if (NewInsertion >= data.Size())
		{

			auto origSize = data.Size();
			auto newsize = data.Grow(NewInsertion - origSize + 1);
			for (int i = origSize; i < NewInsertion; i++)
			{
				markers.insert(i);
			}
			for (int i = NewInsertion + 1; i < newsize; i++)
			{
				markers.insert(i);
			}
			return newsize;
		}
		else
		{
			if (markers.contains(NewInsertion)) markers.erase(NewInsertion);
		}
	}
public:
	AllocVector_base(std::initializer_list<T> Entries)
	{
		for (auto& entry : Entries)
		{
			Push(entry);
		}
	}
	AllocVector_base(std::initializer_list<std::pair<PosType, T>> Entries)
	{

		for (auto& entry : Entries)
			Insert(entry.first, entry.second);
	}
	AllocVector_base(PosType N, const T& t) : data(N, t, true)
	{

	}
	AllocVector_base()
	{

	}

	iterator begin()
	{
		auto i = data.begin();
		while (markers.contains(i.GetIndex()))
		{
			++i;
		}
		return iterator(this, i.GetIndex());
	}
	iterator end()
	{
		return iterator(this, data.end().GetIndex());
	}
	bool Contains(iterator i) const
	{
		return Contains(i.GetIndex());
	}
	bool Contains(PosType i) const
	{
		if (i < 0 || i >= data.Size())
			return false;
		else if (data.Size() == 0) return false;
		else return !markers.contains(i);
	}
	PosType Size_Vector() const { return data.Size(); }
	PosType Count() const { return data.Size() - markers.size(); }
	T& operator[](iterator it)
	{
		return operator[](it.GetIndex());
	}
	T& operator[](PosType Index)
	{
		if (markers.contains(Index)) throw std::out_of_range("Index is marked as empty");
		return data[Index];
	}

	iterator Push(const T& val)
	{
		const auto loc = GetPushLocation();
		EnsureSpace(loc.GetIndex());

		//markers.erase(loc.GetIndex());
		data[loc.GetIndex()] = val;
		return iterator(this, loc.GetIndex());
	}
	template<typename... Args>
	iterator Push_Emplace(Args&&... args)
	{
		const auto loc = GetPushLocation();
		const auto index = loc.GetIndex();
		EnsureSpace(index);

		//markers.erase(index);
		data.Construct(index, std::forward<Args>(args)...);
		return iterator(this, index);
	}

	void Insert(const iterator where, const T& val)
	{
		Insert(where.GetIndex(), val);
	}
	void Insert(const PosType where, const T& val)
	{
		const bool contains = Contains(where);
		EnsureSpace(where);

		if (contains)
			data.Destroy(where);
		//else 
		//	markers.erase(where);


		data[where] = val;
		//

	}
	template<typename... Args >
	void Insert_Emplace(const iterator where, Args&&... args)
	{
		Insert_Emplace(where.GetIndex(), std::forward<Args>(args)...);
	}
	template<typename... Args >
	void Insert_Emplace(const PosType where, Args&&... args)
	{
		const bool contains = Contains(where);
		EnsureSpace(where);

		if (contains)
			data.Destroy(where);
		//else
		//	markers.erase(where);


		data.Construct(where, std::forward<Args>(args)...);
	}
	void Erase(const iterator where)
	{
		Erase(where.GetIndex());
	}
	void Erase(const PosType where)
	{
		if (where < 0 || where >= data.Size() || markers.contains(where)) return;

		data.Destroy(where);


		markers.insert(where);
	}
	iterator IteratorAt(PosType Index)
	{
		return iterator(this, Index);
	}
};


/**
 * \brief AllocVector uint32 tracker, 4,294,967,296 max entries
 * \tparam T
 */
template<typename T, bool NullMemory = false >
using AllocVector = AllocVector_base<T, uint32_t, NullMemory>;


/**
 * \brief AllocVector uint16 tracker, 65,536 max entries
 * \tparam T
 */
template<typename T, bool NullMemory = false>
using  AllocVector_Small = AllocVector_base<T, uint16_t, NullMemory>;

/**
 * \brief AllocVector uint8 tracker, 256 max entries
 * \tparam T
 */
template<typename T, bool NullMemory = false>
using AllocVector_Tiny = AllocVector_base<T, uint8_t, NullMemory>;

