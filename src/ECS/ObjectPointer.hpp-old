#pragma once
#include <pch.h>
#include "Defines.hpp"
template <typename T>
class ObjectPointer
{
	ComponentStorageIterator<T> iterator;
	bool Valid = false;
public:
	ObjectPointer(const ComponentStorageIterator<T>& o) :iterator(o) {
		Valid = true;
	}
	ObjectPointer() :iterator() {}
	T* operator->() { return &((*iterator)); }
	const T* operator->() const { return  &((*iterator)); }
	T& operator*() {return *iterator;}
	const T& operator*() const {return *iterator;}

	constexpr bool isValid() const { return Valid; }
    //constexpr operator::bool() cosnt {return Valid;}
	//T& operator()() { return *allocVectorPtr; }
	//const T& operator()() const { return *allocVectorPtr; }
};
